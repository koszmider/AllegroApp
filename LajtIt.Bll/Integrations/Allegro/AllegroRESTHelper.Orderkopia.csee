

using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Net;
using System.Web.Script.Serialization;
using LajtIt.Dal;

namespace LajtIt.Bll
{
    public partial class AllegroRESTHelper
    {
        public class Orders
        {
            #region
            public class Events
            {
                public class Seller
                {
                    public string id { get; set; }
                }

                public class Buyer
                {
                    public string id { get; set; }
                    public string email { get; set; }
                    public bool guest { get; set; }
                    public string login { get; set; }
                }

                public class External
                {
                    public string id { get; set; }
                }

                public class Offer
                {
                    public string id { get; set; }
                    public string name { get; set; }
                    public External external { get; set; }
                }

                public class Price
                {
                    public string amount { get; set; }
                    public string currency { get; set; }
                }

                public class OriginalPrice
                {
                    public string amount { get; set; }
                    public string currency { get; set; }
                }

                public class LineItem
                {
                    public Offer offer { get; set; }
                    public Price price { get; set; }
                    public string id { get; set; }
                    public int quantity { get; set; }
                    public OriginalPrice originalPrice { get; set; }
                    public DateTime boughtAt { get; set; }
                }

                public class CheckoutForm
                {
                    public string id { get; set; }
                }

                public class Order
                {
                    public Seller seller { get; set; }
                    public Buyer buyer { get; set; }
                    public List<LineItem> lineItems { get; set; }
                    public CheckoutForm checkoutForm { get; set; }
                }

                public class Event
                {
                    public string id { get; set; }
                    public Order order { get; set; }
                    public string type { get; set; }
                    public DateTime occurredAt { get; set; }
                }

                public class RootObject
                {
                    public List<Event> events { get; set; }
                }
            }
            public class EventLast
            {
                public class LatestEvent
                {
                    public string id { get; set; }
                    public DateTime occurredAt { get; set; }
                }

                public class RootObject
                {
                    public LatestEvent latestEvent { get; set; }
                }

            }

            public class CheckoutForm2
            {
                public class Address
                {
                    public string street { get; set; }
                    public string city { get; set; }
                    public string postCode { get; set; }
                    public string countryCode { get; set; }
                }

                public class Buyer
                {
                    public string id { get; set; }
                    public string email { get; set; }
                    public string login { get; set; }
                    public string firstName { get; set; }
                    public string lastName { get; set; }
                    public object companyName { get; set; }
                    public bool guest { get; set; }
                    public object personalIdentity { get; set; }
                    public string phoneNumber { get; set; }
                    public Address address { get; set; }
                }

                public class Payment
                {
                    public string id { get; set; }
                    public string type { get; set; }
                    public string provider { get; set; }
                    public object finishedAt { get; set; }
                    public object paidAmount { get; set; }
                }

                public class Method
                {
                    public string id { get; set; }
                    public string name { get; set; }
                }

                public class Cost
                {
                    public string amount { get; set; }
                    public string currency { get; set; }
                }

                public class Time
                {
                    public object guaranteed { get; set; }
                }

                public class Delivery
                {
                    public object address { get; set; }
                    public Method method { get; set; }
                    public object pickupPoint { get; set; }
                    public Cost cost { get; set; }
                    public bool smart { get; set; }
                    public Time time { get; set; }
                }

                public class Invoice
                {
                    public bool required { get; set; }
                    public object address { get; set; }
                }

                public class External
                {
                    public string id { get; set; }
                }

                public class Offer
                {
                    public string id { get; set; }
                    public string name { get; set; }
                    public External external { get; set; }
                }

                public class OriginalPrice
                {
                    public string amount { get; set; }
                    public string currency { get; set; }
                }

                public class Price
                {
                    public string amount { get; set; }
                    public string currency { get; set; }
                }

                public class LineItem
                {
                    public string id { get; set; }
                    public Offer offer { get; set; }
                    public int quantity { get; set; }
                    public OriginalPrice originalPrice { get; set; }
                    public Price price { get; set; }
                    public List<object> selectedAdditionalServices { get; set; }
                    public DateTime boughtAt { get; set; }
                }

                public class TotalToPay
                {
                    public string amount { get; set; }
                    public string currency { get; set; }
                }

                public class Summary
                {
                    public TotalToPay totalToPay { get; set; }
                }

                public class RootObject
                {
                    public string id { get; set; }
                    public object messageToSeller { get; set; }
                    public Buyer buyer { get; set; }
                    public Payment payment { get; set; }
                    public string status { get; set; }
                    public Delivery delivery { get; set; }
                    public Invoice invoice { get; set; }
                    public List<LineItem> lineItems { get; set; }
                    public List<object> surcharges { get; set; }
                    public List<object> discounts { get; set; }
                    public Summary summary { get; set; }
                }
            }
            public class CheckoutForm
            {
                public class Address
                {
                    public string street { get; set; }
                    public string city { get; set; }
                    public string postCode { get; set; }
                    public string countryCode { get; set; }
                }

                public class Buyer
                {
                    public string id { get; set; }
                    public string email { get; set; }
                    public string login { get; set; }
                    public string firstName { get; set; }
                    public string lastName { get; set; }
                    public string companyName { get; set; }
                    public bool guest { get; set; }
                    public string personalIdentity { get; set; }
                    public string phoneNumber { get; set; }
                    public Address address { get; set; }
                }

                public class PaidAmount
                {
                    public string amount { get; set; }
                    public string currency { get; set; }
                }

                public class Payment
                {
                    public string id { get; set; }
                    public string type { get; set; }
                    public string provider { get; set; }
                    public DateTime? finishedAt { get; set; }
                    public PaidAmount paidAmount { get; set; }
                }

                public class Address2
                {
                    public string firstName { get; set; }
                    public string lastName { get; set; }
                    public string street { get; set; }
                    public string city { get; set; }
                    public string zipCode { get; set; }
                    public string countryCode { get; set; }
                    public string companyName { get; set; }
                    public string phoneNumber { get; set; }
                }

                public class Method
                {
                    public string id { get; set; }
                    public string name { get; set; }
                }

                public class Address3
                {
                    public string street { get; set; }
                    public string zipCode { get; set; }
                    public string city { get; set; }
                }

                public class PickupPoint
                {
                    public string id { get; set; }
                    public string name { get; set; }
                    public string description { get; set; }
                    public Address3 address { get; set; }
                }

                public class Cost
                {
                    public string amount { get; set; }
                    public string currency { get; set; }
                }

                public class Guaranteed
                {
                    public DateTime? from { get; set; }
                    public DateTime? to { get; set; }
                }

                public class Time
                {
                    public Guaranteed guaranteed { get; set; }
                }

                public class Delivery
                {
                    public Address2 address { get; set; }
                    public Method method { get; set; }
                    public PickupPoint pickupPoint { get; set; }
                    public Cost cost { get; set; }
                    public Time time { get; set; }
                    public bool smart { get; set; }
                }

                public class Company
                {
                    public string name { get; set; }
                    public string taxId { get; set; }
                }

                public class NaturalPerson
                {
                    public string firstName { get; set; }
                    public string lastName { get; set; }
                }

                public class Address4
                {
                    public string street { get; set; }
                    public string city { get; set; }
                    public string zipCode { get; set; }
                    public string countryCode { get; set; }
                    public Company company { get; set; }
                    public NaturalPerson naturalPerson { get; set; }
                }

                public class Invoice
                {
                    public bool required { get; set; }
                    public Address4 address { get; set; }
                }

                public class External
                {
                    public string id { get; set; }
                }

                public class Offer
                {
                    public string id { get; set; }
                    public string name { get; set; }
                    public External external { get; set; }
                }

                public class OriginalPrice
                {
                    public string amount { get; set; }
                    public string currency { get; set; }
                }

                public class Price
                {
                    public string amount { get; set; }
                    public string currency { get; set; }
                }

                public class Price2
                {
                    public string amount { get; set; }
                    public string currency { get; set; }
                }

                public class SelectedAdditionalService
                {
                    public string definitionId { get; set; }
                    public string name { get; set; }
                    public Price2 price { get; set; }
                    public int quantity { get; set; }
                }

                public class LineItem
                {
                    public string id { get; set; }
                    public Offer offer { get; set; }
                    public int quantity { get; set; }
                    public OriginalPrice originalPrice { get; set; }
                    public Price price { get; set; }
                    public List<SelectedAdditionalService> selectedAdditionalServices { get; set; }
                    public DateTime boughtAt { get; set; }
                }

                public class PaidAmount2
                {
                    public string amount { get; set; }
                    public string currency { get; set; }
                }

                public class Surcharge
                {
                    public string id { get; set; }
                    public string type { get; set; }
                    public string provider { get; set; }
                    public DateTime? finishedAt { get; set; }
                    public PaidAmount2 paidAmount { get; set; }
                }

                public class Discount
                {
                    public string type { get; set; }
                }

                public class TotalToPay
                {
                    public string amount { get; set; }
                    public string currency { get; set; }
                }

                public class Summary
                {
                    public TotalToPay totalToPay { get; set; }
                }

                public class RootObject
                {
                    public string id { get; set; }
                    public string messageToSeller { get; set; }
                    public Buyer buyer { get; set; }
                    public Payment payment { get; set; }
                    public string status { get; set; }
                    public Delivery delivery { get; set; }
                    public Invoice invoice { get; set; }
                    public List<LineItem> lineItems { get; set; }
                    public List<Surcharge> surcharges { get; set; }
                    public List<Discount> discounts { get; set; }
                    public Summary summary { get; set; }
                }
                 
            }
            #endregion
            public static void GetOrders()
            {
                Dal.AllegroScan asc = new Dal.AllegroScan();
                List<Dal.AllegroUser> users = asc.GetAllegroMyUsers();//.Where(x => x.UserId == 44282528).ToList();


                foreach (Dal.AllegroUser au in users)
                    //GetEventLast(au);
                    GetEvents(au);
            }

            private static void GetEvents(AllegroUser au)
            {
                try
                {
                    if (au == null)
                        return;

                    long? lastId = GetLastId(au);
                    string from = "";
                    if (lastId.HasValue)
                        from = String.Format("&from={0}", lastId);

                    HttpWebRequest request = GetHttpWebRequestBeta(
                        String.Format("/order/events?limit=1000{0}", from)//, limit, offset)
                        , "GET", null, au.UserId);



                    string text = null;
                    using (WebResponse webResponse = request.GetResponse())
                    {
                        Stream responseStream = webResponse.GetResponseStream();
                        StreamReader reader = new StreamReader(responseStream);
                        text = reader.ReadToEnd();
                    }

                    var json_serializer = new JavaScriptSerializer();
                    Events.RootObject orders = json_serializer.Deserialize<Events.RootObject>(text);


                    SaveEvents(orders.events);



                }
                catch (Exception ex)
                {
                    Bll.ErrorHandler.SendError(ex, String.Format("Błąd aktualizacji ofert. Allegro.UserId: {0}", au.UserId));

                }
            }

            private static void GetCheckoutForm(long userId, Guid checkoutFormId)
            {
                try
                {

                    HttpWebRequest request = GetHttpWebRequestBeta(
                        String.Format("/order/checkout-forms/{0}", checkoutFormId)
                        , "GET", null, userId);


                    string text = null;
                    using (WebResponse webResponse = request.GetResponse())
                    {
                        Stream responseStream = webResponse.GetResponseStream();
                        StreamReader reader = new StreamReader(responseStream);
                        text = reader.ReadToEnd();
                    }

                    var json_serializer = new JavaScriptSerializer();
                    CheckoutForm.RootObject checkoutForm = json_serializer.Deserialize<CheckoutForm.RootObject>(text);


                    SetCheckoutForm(checkoutForm);


                }
                catch (WebException ex)
                {
                    using (WebResponse response = ex.Response)
                    {
                        HttpWebResponse httpResponse = (HttpWebResponse)response;
                        if (httpResponse == null)
                        {
                            Bll.ErrorHandler.SendError(ex, ex.Message);


                        }
                        Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                        using (Stream data = response.GetResponseStream())
                        using (var reader = new StreamReader(data))
                        {
                            string text = reader.ReadToEnd();


                            Bll.ErrorHandler.SendError(ex, String.Format("Błąd pobierania zamówienia {0}, {1}", userId, text));
                        }
                    }
                }
                catch (Exception ex)
                { 
                    Bll.ErrorHandler.SendError(ex, String.Format("Błąd pobierania zamówienia {0}, {1}", userId, ex.Message));
                }
            }

            private static void SetCheckoutForm(CheckoutForm.RootObject checkoutForm)
            {
                try
                {
                    Dal.AllegroRestHelper arh = new AllegroRestHelper();

                    Dal.Order order = arh.GetOrderByCheckoutFormId(checkoutForm.id);
                    
                    order.FirstName = checkoutForm.buyer.firstName;
                    order.LastName = checkoutForm.buyer.lastName;
                    if (checkoutForm.buyer.address != null)
                    {
                        order.City = checkoutForm.buyer.address.city;
                        order.Postcode = checkoutForm.buyer.address.postCode;
                        order.Address = checkoutForm.buyer.address.street;
                    }
                    order.CompanyName = checkoutForm.buyer.companyName;
                    order.Phone = checkoutForm.buyer.phoneNumber;

                    if (checkoutForm.delivery != null)
                    {
                        if (checkoutForm.delivery.address != null)
                        {
                            order.ShipmentFirstName = checkoutForm.delivery.address.firstName;
                            order.ShipmentLastName = checkoutForm.delivery.address.lastName;
                            order.ShipmentCity = checkoutForm.delivery.address.city;
                            order.ShipmentPostcode = checkoutForm.delivery.address.zipCode;
                            order.ShipmentAddress = checkoutForm.delivery.address.street;
                            order.ShipmentCompanyName = checkoutForm.delivery.address.companyName;
                            order.Phone = checkoutForm.delivery.address.phoneNumber;
                        } 
                        else
                        {
                            order.ShipmentFirstName = checkoutForm.buyer.firstName;
                            order.ShipmentLastName = checkoutForm.buyer.lastName;
                            if (checkoutForm.buyer.address != null)
                            {
                                order.ShipmentCity = checkoutForm.buyer.address.city;
                                order.ShipmentPostcode = checkoutForm.buyer.address.postCode;
                                order.ShipmentAddress = checkoutForm.buyer.address.street;
                            }
                            order.Phone = checkoutForm.buyer.phoneNumber;

                        }
                        order.ShippingCost = Decimal.Parse(checkoutForm.delivery.cost.amount, System.Globalization.CultureInfo.InvariantCulture);

                        if (checkoutForm.delivery.pickupPoint != null)
                            order.ShippingData = String.Format("{0}|", checkoutForm.delivery.pickupPoint.id);

                        if (checkoutForm.delivery.method != null)
                        {
                            order.ShippintTypeId = arh.GetShippingTypeId(checkoutForm.delivery.method.id);

                        }
                    }
                    Dal.Invoice invoice = null;
                    if (checkoutForm.invoice != null)
                    {
                        if (checkoutForm.invoice.required && checkoutForm.invoice.address !=null)
                        {
                            invoice = new Invoice()
                            {
                                Address = checkoutForm.invoice.address.street,
                                City = checkoutForm.invoice.address.city,
                                CompanyId = (int)Dal.Helper.DefaultCompanyId,
                                Email = checkoutForm.buyer.email,
                                InvoiceTypeId = 2,
                                Postcode = checkoutForm.invoice.address.zipCode,
                                InvoiceDate = DateTime.Now
                            };
                            if (checkoutForm.invoice.address.company != null)
                            {
                                invoice.CompanyName = checkoutForm.invoice.address.company.name;
                                invoice.Nip = checkoutForm.invoice.address.company.taxId;
                            }
                            else
                            {
                                invoice.CompanyName = "";
                                invoice.Nip = "";
                            }
                        }
                    }
                    List<Dal.OrderPayment> ops = new List<OrderPayment>();
                    if (checkoutForm.payment != null && checkoutForm.payment.type == "ONLINE" && checkoutForm.payment.paidAmount!=null)
                    {
                        Dal.OrderPayment op = new OrderPayment()
                        {
                            Comment = String.Format("Id płatności: {0}, typ: {1}"
                            , checkoutForm.payment.id
                            , checkoutForm.payment.provider),
                            Amount = Decimal.Parse(checkoutForm.payment.paidAmount.amount, System.Globalization.CultureInfo.InvariantCulture),
                            InsertDate = checkoutForm.payment.finishedAt.Value,
                            InsertUser = "system",
                            OrderId = order.OrderId,
                            PaymentTypeId = (int)Dal.Helper.OrderPaymentType.PayU23,
                            ExternalPaymentId = checkoutForm.payment.id

                        };
                        ops.Add(op);
                    }
                    if (checkoutForm.surcharges != null && checkoutForm.payment.type == "ONLINE")
                    {
                        foreach (CheckoutForm.Surcharge s in checkoutForm.surcharges)
                        {
                            Dal.OrderPayment op = new OrderPayment()
                            {
                                Comment = String.Format("Id dopłaty : {0}, typ: {1}"
                                , s.id
                                , s.provider),
                                Amount = Decimal.Parse(s.paidAmount.amount, System.Globalization.CultureInfo.InvariantCulture),
                                InsertDate = s.finishedAt.Value,
                                InsertUser = "system",
                                OrderId = order.OrderId,
                                PaymentTypeId = (int)Dal.Helper.OrderPaymentType.PayU23,
                                ExternalPaymentId = s.id
                            };

                            ops.Add(op);
                        }
                    }

                    arh.SetOrder(order, invoice, ops);
                }
                catch (Exception ex)
                {
                    Bll.ErrorHandler.SendError(ex, String.Format("Błąd pobierania zamówienia checkoutFormId: {0}, msg; {1}", checkoutForm.id, ex.Message));

                }
            }

            private static long? GetLastId(AllegroUser au)
            {
                Dal.AllegroRestHelper arh = new AllegroRestHelper();

                return arh.GetAllegroOrderLastId(au.UserId);
            }

            private static void SaveEvents(List<Events.Event> events)
            {
                List<Dal.AllegroOrderLineItem> lineItems = new List<AllegroOrderLineItem>();



                List<Dal.AllegroUser> users = new List<AllegroUser>();

                users.AddRange(events.Select(x => new Dal.AllegroUser()
                {
                    UserId = Int64.Parse(x.order.buyer.id),
                    Follow = false,
                    UserName = x.order.buyer.login
                }).ToList());

                Dal.AllegroRestHelper arh = new AllegroRestHelper();

                arh.SetAllegroUsers(users);

                foreach (Events.Event o in events)
                {
                    Dal.AllegroOrder ao = new AllegroOrder()
                    {
                        CheckoutFormId = Guid.Parse(o.order.checkoutForm.id),
                        Email = o.order.buyer.email,
                        Guest = o.order.buyer.guest,
                        Login = o.order.buyer.login,
                        Id = Int64.Parse(o.id),
                        OccuredAt = o.occurredAt,
                        SellerId = Int64.Parse(o.order.seller.id),
                        UserId = Int64.Parse(o.order.buyer.id),
                        Type = o.type,
                        IsProcessed = false
                    };

                    foreach (Events.LineItem item in o.order.lineItems)
                    {
                        Dal.AllegroOrderLineItem i = new AllegroOrderLineItem()
                        {
                            BoughtAt = item.boughtAt,
                            CheckoutFormId = Guid.Parse(item.id),
                            ExternalId = item.offer.external == null ? null : item.offer.external.id,
                            ItemId = Int64.Parse(item.offer.id),
                            Name = item.offer.name,
                            OriginalPrice = Decimal.Parse(item.originalPrice.amount, System.Globalization.CultureInfo.InvariantCulture),
                            Price = Decimal.Parse(item.price.amount, System.Globalization.CultureInfo.InvariantCulture),
                            Quantity = item.quantity,
                            AllegroOrder = ao,

                        };
                        lineItems.Add(i);
                    }
                }

                arh.SetAllegroOrders(lineItems);

            }

            private static void GetEventLast(AllegroUser au)
            {
                try
                {
                    if (au == null)
                        return;

                    HttpWebRequest request = GetHttpWebRequestBeta(
                        String.Format("/order/event-stats", au.UserId)//, limit, offset)
                        , "GET", null, au.UserId);



                    string text = null;
                    using (WebResponse webResponse = request.GetResponse())
                    {
                        Stream responseStream = webResponse.GetResponseStream();
                        StreamReader reader = new StreamReader(responseStream);
                        text = reader.ReadToEnd();
                    }

                    var json_serializer = new JavaScriptSerializer();


                    EventLast.RootObject offers = json_serializer.Deserialize<EventLast.RootObject>(text);
                    //Console.WriteLine(String.Format("Liczba ofert: {0}/{1}:", offers.count, offers.offers.Count));


                    //if (limit <= offers.count)

                    //    GetSellerOffers(au, limit, offset + limit);


                }
                catch (Exception ex)
                {
                    Bll.ErrorHandler.SendError(ex, String.Format("Błąd aktualizacji ofert. Allegro.UserId: {0}", au.UserId));

                }
            }

            public static void Process()
            {
                Dal.AllegroRestHelper arh = new AllegroRestHelper();

                List<Dal.AllegroOrder> allegroOrders = arh.GetAllegroOrdersToProcess();

                string[] checkoutFormIds = allegroOrders.Select(x => x.CheckoutFormId.ToString()).Distinct().ToArray();

                foreach (string checkoutFormId in checkoutFormIds)
                {

                    Dal.Order order = arh.GetOrderByCheckoutFormId(checkoutFormId);

                    var aos = allegroOrders.Where(x => x.CheckoutFormId == Guid.Parse(checkoutFormId))
                        .OrderBy(x => x.OccuredAt)
                        .ToList();

                    int orderId = 0;

                    if (order != null)
                        orderId = order.OrderId;

                        foreach (Dal.AllegroOrder ao in aos)
                    {
                        if (orderId == 0)
                            orderId = SetOrder(ao); 

                        switch (ao.Type)
                        {
                            case "BOUGHT":
                                SetOrderProduct(orderId, ao);
                                break;
                            case "FILLED_IN":  
                            case "READY_FOR_PROCESSING":
                                GetCheckoutForm(ao.SellerId, ao.CheckoutFormId);
                                break;

                        }
                        arh.SetAllegroOrderProcessed(ao.Id);
                    }

                }
            }
            private static void SetOrderProduct(int orderId, AllegroOrder ao)
            {
                Dal.AllegroRestHelper arh = new AllegroRestHelper();

                Dal.AllegroOrderLineItem item = arh.GetAllegroOrderLineItem(ao.Id);

                Dal.OrderProduct op = new OrderProduct()
                {
                    OrderId = orderId,
                    SourceTypeId = (int)Dal.Helper.Source.Allegro,
                    Quantity = item.Quantity,
                    Price = item.Price,
                    ExternalProductId = item.ItemId,
                    ProductName = item.Name,
                    VAT = Dal.Helper.VAT,
                    Rebate = 0,
                    ProductTypeId = (int)Dal.Helper.ProductType.RegularProduct,
                    OrderProductStatusId = (int)Dal.Helper.OrderProductStatus.New
                };

                if (item.ExternalId != null)
                    op.ProductCatalogId = Int32.Parse(item.ExternalId);

                arh.SetOrderProduct(op);

            }
            private static int SetOrder(AllegroOrder ao)
            {
                Dal.Order order = new Dal.Order()
                {
                    CheckoutFormId = ao.CheckoutFormId.ToString(),
                    OrderStatusId = (int)Dal.Helper.OrderStatus.New,
                    SourceTypeId = (int)Dal.Helper.Source.Allegro,
                    Email = ao.Email,
                    ExternalUserId = ao.UserId,
                    InsertDate = ao.OccuredAt,
                    FirstName = ao.Login,
                    LastName = "",
                    Address = "",
                    Postcode = "",
                    City = "",
                    Phone = "",
                    DoNotAutoEdit = false,
                    AmountPaid = 0,
                    AmountToPay = 0,
                    OrderGuid = ao.CheckoutFormId,
                    ShippingCostVAT = Dal.Helper.VAT,
                    ParActive = true

                };
                Dal.OrderStatusHistory osh = new OrderStatusHistory()
                {
                    InsertDate = ao.OccuredAt,
                    InsertUser = "system",
                    Order = order,
                    OrderStatusId = (int)Dal.Helper.OrderStatus.New,
                    Comment = ""
                };

                Dal.AllegroRestHelper arh = new AllegroRestHelper();

                arh.SetOrder(osh);

                return order.OrderId;
            }


        }
    }
}
